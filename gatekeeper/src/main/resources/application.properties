# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ===============================
# = DATA SOURCE
# ===============================
spring.datasource.url = jdbc:mysql://${ANCODE_DB_HOST:localhost}:${ANCODE_DB_PORT:3306}/${ANCODE_DB_NAME:slmlp}
spring.datasource.username = ${ANCODE_DB_USERNAME:root}
spring.datasource.password = ${ANCODE_DB_PASSWORD:l3tm3in}
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
spring.datasource.platform=mysql
spring.datasource.data=${DB_SCRIPT:classpath:/Dumps.sql}

# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.cache=false

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select email, password, active from user where email=?
spring.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?

#spring.queries.roles-query=select u.email, r.role, p.permission from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) inner join role_permission rp on(rp.role_id=r.role_id) inner join permission p on(rp.permission_id=p.permission_id) where u.email=?


spring.queries.group-query=select u.email, r.role, p.permission from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) inner join role_permission rp on(rp.role_id=r.role_id) inner join permission p on(rp.permission_id=p.permission_id) where u.email=?

server.max-http-header-size=10000000
